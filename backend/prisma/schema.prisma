generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collaborator {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  phone         String
  password      String
  type          Role     @default(USER)
  statusAccount Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  homes         Home[]

  @@map("collaborators")
}

model Home {
  id             String        @id @default(uuid())
  cep            String
  state          String
  city           String
  district       String
  address        String
  number         String
  status         Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  collaboratorId String?
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id], onDelete: SetNull)
  animals        Animal[]

  @@map("homes")
}

model Animal {
  id           String      @id @default(uuid())
  name         String
  description  String
  sex          String
  castrated    Boolean
  race         String
  linkPhoto    String?
  dateExit     DateTime?
  status       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  home         Home?       @relation(fields: [homeId], references: [id], onDelete: SetNull)
  homeId       String?
  typeAnimal   TypeAnimal? @relation(fields: [typeAnimalId], references: [id], onDelete: SetNull)
  typeAnimalId Int?
  services     Service[]

  @@map("animals")
}

model TypeAnimal {
  id        Int      @id @default(autoincrement())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  animals   Animal[]

  @@map("typesAnimals")
}

model Service {
  id          String      @id @default(uuid())
  description String
  status      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  animal      Animal?     @relation(fields: [animalId], references: [id], onDelete: SetNull)
  animalId    String?
  procedures  Procedure[] @relation("proceduresOnServices")
  doctors     Doctor[]    @relation("doctorsOnServices")

  @@map("services")
}

model Doctor {
  id           String    @id @default(uuid())
  name         String
  crmv         String    @unique
  expertise    String
  phone        String
  socialReason String
  openHours    String
  cep          String
  state        String
  city         String
  district     String
  address      String
  number       String
  status       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  services     Service[] @relation("doctorsOnServices")

  @@map("doctors")
}

model Procedure {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  dosage      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[] @relation("proceduresOnServices")

  @@map("procedures")
}

enum Role {
  USER
  ADMIN
}
